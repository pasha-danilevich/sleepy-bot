from typing import Any, Awaitable, Callable, Dict

from aiogram import BaseMiddleware
from aiogram.types import CallbackQuery
from aiogram_dialog.api.entities import Context


class CallbackLoggerMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[CallbackQuery, Dict[str, Any]], Awaitable[Any]],
        event: CallbackQuery,
        data: Dict[str, Any],
    ) -> Any:
        try:
            result = await handler(event, data)
            context: Context | None = data.get('aiogd_context')
            if context is not None:
                print(
                    f"üìå Callback {context.state}:"
                    f" {context.dialog_data=} {context.start_data=}"
                )
            else:
                print(f"üìå Callback –æ—Ç aiogram: ")  # {event, data}
            return result
        except Exception as e:
            print(f"‚ùå Error processing callback {event.data}: {str(e)}")
            # TODO: –≥–ª—É—à–∏—Ç—å trace –Ω–∞ prod
            # TODO: –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–æ–≥–∏ –≤ elastic
            raise


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ middleware –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
